[{"/Users/alexcyphus/code/experiments/webview-starter/src/components/Slider.js":"1","/Users/alexcyphus/code/experiments/webview-starter/src/App.js":"2","/Users/alexcyphus/code/experiments/webview-starter/src/functions.js":"3"},{"size":572,"mtime":1607451934447,"results":"4","hashOfConfig":"5"},{"size":4175,"mtime":1616757831205,"results":"6","hashOfConfig":"5"},{"size":1747,"mtime":1616687892169,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1yubfco",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/alexcyphus/code/experiments/webview-starter/src/components/Slider.js",["15","16"],"/Users/alexcyphus/code/experiments/webview-starter/src/App.js",["17","18","19"],"import React from 'react'\nimport './App.scss';\nimport ActionButton from './components/ActionButton.js';\nimport Row from './components/Row.js';\nimport Slider from './components/Slider.js';\nimport Popup from './components/Popup.js';\nimport InfoCard from './components/InfoCard.js';\nimport HeaderTitle from './components/HeaderTitle.js';\nimport FixedButton from './components/FixedButton.js';\nimport DarkModeWrapper from './components/DarkModeWrapper.js'\nimport {buildTP, shuffleArray, postToSheets, getData} from \"./functions.js\"\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      sliderScreen: 0,\n      popup: false,\n      infocard: false,\n      dark: false,\n      currency: false,\n      partners: false,\n      profile: false\n    }\n    this.handleSliderChange = this.handleSliderChange.bind(this)\n  }\n\n  handleSliderChange(desiredSliderScreen){\n    this.setState({sliderScreen: desiredSliderScreen})\n  }\n\n  componentWillMount() {\n    if (window.NativeApp){\n      this.setState({\n        partners: JSON.parse(window.NativeApp.getPartners()),\n        profile: JSON.parse(window.NativeApp.getMyProfile()),\n        currency: window.NativeApp.getCurrency()\n      })\n    }\n\n    // if ios \n    else if (window.webkit){\n      window.setMyProfile = profile => this.setState({profile: JSON.parse(profile)});\n      window.setMyPartners = partners => this.setState({partners: JSON.parse(partners)});\n      window.setCurrency = currency => this.setState({currency: currency});\n      // window.setDarkModeEnabled = enabled => this.setState({dark: JSON.parse(enabled)});\n      window.webkit.messageHandlers.getMyProfile.postMessage({});\n      window.webkit.messageHandlers.getMyPartners.postMessage({});\n      window.webkit.messageHandlers.getMyCurrency.postMessage({});\n      window.webkit.messageHandlers.getDarkModeEnabled.postMessage({});\n    }\n  }\n\n  // to be updated with every experiment\n  tp(action){\n    return buildTP('testwebview')(action)\n  }\n\n  render(){\n\n    const MainContent = () => {\n      return (\n      <div className=\"App\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"></meta>\n      <button onClick={() => this.tp('testbtn2')}> testbtn1 </button>\n      <button onClick={() => this.tp('testbtn2')}> testbtn2 </button>\n      <p style={{overflowWrap: 'anywhere'}}>{JSON.stringify(this.state)}</p>\n      <HeaderTitle title={'I am category'}/>\n      <Slider \n        title1={\"Hello\"}\n        title2={\"World\"}\n        sliderScreen={this.state.sliderScreen}\n        handleSliderChange={this.handleSliderChange}\n      />\n      <Row title={this.state.partners[0] && this.state.partners[0].firstName} image={this.state.partners[0] && this.state.partners[0].photo} roundImage={true}>\n        <p>Now I can put anything I want in here</p>\n      </Row>\n      <Row title=\"Computer McComputerface\" image={\"/users/chelsea.jpg\"} localImage={true}>\n        <p>Now I can put anything I want in here here here here here here here here here here here here here here here here here here here here here here here here here here hello here here here here here here here here here here here here here here here here here here</p>\n      </Row>\n      <ActionButton text={\"hello world\"} color={\"blue\"} close={true} key={1}/>\n      {this.state.popup ? <Popup buttonText={\"I am button\"} text=\"i am description\" placeholder=\"i am placeholder\" title=\"poppy\">\n        <p>hello</p>\n        <p>hello hello hello v hello vvhellohellohello hello hello hello hello hello hello hello hello v</p>\n        <p>hello</p>\n        <p>hello</p>\n        <p>hello</p>\n        \n      </Popup> : null}\n      {this.state.infocard ? \n      <InfoCard buttonText={\"I am button\"} title={\"I am infocard\"}>\n        <p>HELLO WORLDHELLO WORLDHELLO WORLDHELLO WORLDHELLO WORLDHELLO WORLDHELLO WORLDHELLO WORLDHELLO WORLDHELLO WORLDHELLO WORLDHELLO WORLD</p>\n      </InfoCard>\n      :\n      null\n      }\n      <FixedButton image=\"/flags/canada.png\"/>\n    </div>\n      )\n    }\n    \n    return this.state.dark \n      ? <DarkModeWrapper><MainContent/></DarkModeWrapper>\n      : <MainContent/>\n  }\n}\n\nexport default App;\n","/Users/alexcyphus/code/experiments/webview-starter/src/functions.js",["20"],{"ruleId":"21","severity":1,"message":"22","line":4,"column":71,"nodeType":"23","messageId":"24","endLine":4,"endColumn":73},{"ruleId":"21","severity":1,"message":"22","line":5,"column":71,"nodeType":"23","messageId":"24","endLine":5,"endColumn":73},{"ruleId":"25","severity":1,"message":"26","line":11,"column":18,"nodeType":"27","messageId":"28","endLine":11,"endColumn":30},{"ruleId":"25","severity":1,"message":"29","line":11,"column":32,"nodeType":"27","messageId":"28","endLine":11,"endColumn":44},{"ruleId":"25","severity":1,"message":"30","line":11,"column":46,"nodeType":"27","messageId":"28","endLine":11,"endColumn":53},{"ruleId":"21","severity":1,"message":"22","line":33,"column":16,"nodeType":"23","messageId":"24","endLine":33,"endColumn":18},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'shuffleArray' is defined but never used.","Identifier","unusedVar","'postToSheets' is defined but never used.","'getData' is defined but never used."]